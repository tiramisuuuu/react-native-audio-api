"use strict";

let module = {},
  exports = {};
var SignalsmithStretch = (() => {
  var _scriptName = typeof document != 'undefined' ? document.currentScript?.src : undefined;
  return async function (moduleArg = {}) {
    var moduleRtn;
    var Module = moduleArg;
    var readyPromiseResolve, readyPromiseReject;
    var readyPromise = new Promise((resolve, reject) => {
      readyPromiseResolve = resolve;
      readyPromiseReject = reject;
    });
    var ENVIRONMENT_IS_WEB = typeof window == 'object';
    var ENVIRONMENT_IS_WORKER = typeof WorkerGlobalScope != 'undefined';
    var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string' && process.type != 'renderer';
    var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
    var crypto = globalThis?.crypto || {
      getRandomValues: array => {
        for (var i = 0; i < array.length; i++) array[i] = Math.random() * 256 | 0;
      }
    };
    var performance = globalThis?.performance || {
      now: _ => Date.now()
    };
    var moduleOverrides = Object.assign({}, Module);
    var arguments_ = [];
    var quit_ = (status, toThrow) => {
      throw toThrow;
    };
    var scriptDirectory = '';
    var readAsync, readBinary;
    if (ENVIRONMENT_IS_SHELL) {
      readBinary = f => {
        if (typeof readbuffer == 'function') {
          return new Uint8Array(readbuffer(f));
        }
        let data = read(f, 'binary');
        assert(typeof data == 'object');
        return data;
      };
      readAsync = async f => readBinary(f);
      globalThis.clearTimeout ??= id => {};
      globalThis.setTimeout ??= f => f();
      arguments_ = globalThis.arguments || globalThis.scriptArgs;
      if (typeof quit == 'function') {
        quit_ = (status, toThrow) => {
          setTimeout(() => {
            if (!(toThrow instanceof ExitStatus)) {
              let toLog = toThrow;
              if (toThrow && typeof toThrow == 'object' && toThrow.stack) {
                toLog = [toThrow, toThrow.stack];
              }
              err(`exiting due to exception: ${toLog}`);
            }
            quit(status);
          });
          throw toThrow;
        };
      }
      if (typeof print != 'undefined') {
        globalThis.console ??= {};
        console.log = print;
        console.warn = console.error = globalThis.printErr ?? print;
      }
    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      if (ENVIRONMENT_IS_WORKER) {
        scriptDirectory = self.location.href;
      } else if (typeof document != 'undefined' && document.currentScript) {
        scriptDirectory = document.currentScript.src;
      }
      if (_scriptName) {
        scriptDirectory = _scriptName;
      }
      if (scriptDirectory.startsWith('blob:')) {
        scriptDirectory = '';
      } else {
        scriptDirectory = scriptDirectory.slice(0, scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/') + 1);
      }
      {
        if (ENVIRONMENT_IS_WORKER) {
          readBinary = url => {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            xhr.responseType = 'arraybuffer';
            xhr.send(null);
            return new Uint8Array(xhr.response);
          };
        }
        readAsync = async url => {
          var response = await fetch(url, {
            credentials: 'same-origin'
          });
          if (response.ok) {
            return response.arrayBuffer();
          }
          throw new Error(response.status + ' : ' + response.url);
        };
      }
    } else {}
    var out = console.log.bind(console);
    var err = console.error.bind(console);
    Object.assign(Module, moduleOverrides);
    moduleOverrides = null;
    var wasmBinary;
    var wasmMemory;
    var ABORT = false;
    var EXITSTATUS;
    var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAP64, HEAPU64, HEAPF64;
    var runtimeInitialized = false;
    function updateMemoryViews() {
      var b = wasmMemory.buffer;
      Module['HEAP8'] = HEAP8 = new Int8Array(b);
      HEAP16 = new Int16Array(b);
      HEAPU8 = new Uint8Array(b);
      HEAPU16 = new Uint16Array(b);
      HEAP32 = new Int32Array(b);
      HEAPU32 = new Uint32Array(b);
      HEAPF32 = new Float32Array(b);
      HEAPF64 = new Float64Array(b);
      HEAP64 = new BigInt64Array(b);
      HEAPU64 = new BigUint64Array(b);
    }
    function preRun() {}
    function initRuntime() {
      runtimeInitialized = true;
      wasmExports['e']();
    }
    function preMain() {}
    function postRun() {}
    var runDependencies = 0;
    var dependenciesFulfilled = null;
    function addRunDependency(id) {
      runDependencies++;
    }
    function removeRunDependency(id) {
      runDependencies--;
      if (runDependencies == 0) {
        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback();
        }
      }
    }
    function abort(what) {
      what = 'Aborted(' + what + ')';
      err(what);
      ABORT = true;
      what += '. Build with -sASSERTIONS for more info.';
      var e = new WebAssembly.RuntimeError(what);
      readyPromiseReject(e);
      throw e;
    }
    var wasmBinaryFile = 'data:application/octet-stream;base64,';
    function getBinarySync(file) {
      if (file == wasmBinaryFile && wasmBinary) {
        return new Uint8Array(wasmBinary);
      }
      var binary = tryParseAsDataURI(file);
      if (binary) {
        return binary;
      }
      if (readBinary) {
        return readBinary(file);
      }
      throw 'both async and sync fetching of the wasm failed';
    }
    async function getWasmBinary(binaryFile) {
      return getBinarySync(binaryFile);
    }
    async function instantiateArrayBuffer(binaryFile, imports) {
      try {
        var binary = await getWasmBinary(binaryFile);
        var instance = await WebAssembly.instantiate(binary, imports);
        return instance;
      } catch (reason) {
        err(`failed to asynchronously prepare wasm: ${reason}`);
        abort(reason);
      }
    }
    async function instantiateAsync(binary, binaryFile, imports) {
      return instantiateArrayBuffer(binaryFile, imports);
    }
    function getWasmImports() {
      return {
        a: wasmImports
      };
    }
    async function createWasm() {
      function receiveInstance(instance, module) {
        wasmExports = instance.exports;
        wasmMemory = wasmExports['d'];
        updateMemoryViews();
        removeRunDependency('wasm-instantiate');
        return wasmExports;
      }
      addRunDependency('wasm-instantiate');
      function receiveInstantiationResult(result) {
        return receiveInstance(result['instance']);
      }
      var info = getWasmImports();
      try {
        var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
        var exports = receiveInstantiationResult(result);
        return exports;
      } catch (e) {
        readyPromiseReject(e);
        return Promise.reject(e);
      }
    }
    class ExitStatus {
      name = 'ExitStatus';
      constructor(status) {
        this.message = `Program terminated with exit(${status})`;
        this.status = status;
      }
    }
    var base64Decode = b64 => {
      var b1,
        b2,
        i = 0,
        j = 0,
        bLength = b64.length;
      var output = new Uint8Array((bLength * 3 >> 2) - (b64[bLength - 2] == '=') - (b64[bLength - 1] == '='));
      for (; i < bLength; i += 4, j += 3) {
        b1 = base64ReverseLookup[b64.charCodeAt(i + 1)];
        b2 = base64ReverseLookup[b64.charCodeAt(i + 2)];
        output[j] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
        output[j + 1] = b1 << 4 | b2 >> 2;
        output[j + 2] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i + 3)];
      }
      return output;
    };
    var isDataURI = filename => filename.startsWith(dataURIPrefix);
    var dataURIPrefix = 'data:application/octet-stream;base64,';
    var tryParseAsDataURI = filename => {
      if (isDataURI(filename)) {
        return base64Decode(filename.slice(dataURIPrefix.length));
      }
    };
    var __abort_js = () => abort('');
    var getHeapMax = () => 2147483648;
    var alignMemory = (size, alignment) => Math.ceil(size / alignment) * alignment;
    var abortOnCannotGrowMemory = requestedSize => {
      abort('OOM');
    };
    var growMemory = size => {
      var b = wasmMemory.buffer;
      var pages = (size - b.byteLength + 65535) / 65536 | 0;
      try {
        wasmMemory.grow(pages);
        updateMemoryViews();
        return 1;
      } catch (e) {}
    };
    var _emscripten_resize_heap = requestedSize => {
      var oldSize = HEAPU8.length;
      requestedSize >>>= 0;
      var maxHeapSize = getHeapMax();
      if (requestedSize > maxHeapSize) {
        abortOnCannotGrowMemory(requestedSize);
      }
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.5 / cutDown);
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
        var newSize = Math.min(maxHeapSize, alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536));
        var replacement = growMemory(newSize);
        if (replacement) {
          return true;
        }
      }
      abortOnCannotGrowMemory(requestedSize);
    };
    var initRandomFill = () => view => crypto.getRandomValues(view);
    var randomFill = view => {
      (randomFill = initRandomFill())(view);
    };
    var _random_get = (buffer, size) => {
      randomFill(HEAPU8.subarray(buffer, buffer + size));
      return 0;
    };
    var keepRuntimeAlive = () => true;
    var _proc_exit = code => {
      EXITSTATUS = code;
      if (!keepRuntimeAlive()) {
        ABORT = true;
      }
      quit_(code, new ExitStatus(code));
    };
    var exitJS = (status, implicit) => {
      EXITSTATUS = status;
      _proc_exit(status);
    };
    var handleException = e => {
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      quit_(1, e);
    };
    var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;
    var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      while (idx < endPtr) {
        var u0 = heapOrArray[idx++];
        if (!(u0 & 128)) {
          str += String.fromCharCode(u0);
          continue;
        }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 224) == 192) {
          str += String.fromCharCode((u0 & 31) << 6 | u1);
          continue;
        }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 240) == 224) {
          u0 = (u0 & 15) << 12 | u1 << 6 | u2;
        } else {
          u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
      }
      return str;
    };
    var UTF8ToString = (ptr, maxBytesToRead) => ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    for (var base64ReverseLookup = new Uint8Array(123), i = 25; i >= 0; --i) {
      base64ReverseLookup[48 + i] = 52 + i;
      base64ReverseLookup[65 + i] = i;
      base64ReverseLookup[97 + i] = 26 + i;
    }
    base64ReverseLookup[43] = 62;
    base64ReverseLookup[47] = 63;
    var wasmImports = {
      c: __abort_js,
      b: _emscripten_resize_heap,
      a: _random_get
    };
    var wasmExports = await createWasm();
    var ___wasm_call_ctors = wasmExports['e'];
    var _setBuffers = Module['_setBuffers'] = wasmExports['g'];
    var _blockSamples = Module['_blockSamples'] = wasmExports['h'];
    var _intervalSamples = Module['_intervalSamples'] = wasmExports['i'];
    var _inputLatency = Module['_inputLatency'] = wasmExports['j'];
    var _outputLatency = Module['_outputLatency'] = wasmExports['k'];
    var _reset = Module['_reset'] = wasmExports['l'];
    var _presetDefault = Module['_presetDefault'] = wasmExports['m'];
    var _presetCheaper = Module['_presetCheaper'] = wasmExports['n'];
    var _configure = Module['_configure'] = wasmExports['o'];
    var _setTransposeFactor = Module['_setTransposeFactor'] = wasmExports['p'];
    var _setTransposeSemitones = Module['_setTransposeSemitones'] = wasmExports['q'];
    var _seek = Module['_seek'] = wasmExports['r'];
    var _process = Module['_process'] = wasmExports['s'];
    var _flush = Module['_flush'] = wasmExports['t'];
    var _main = Module['_main'] = wasmExports['u'];
    Module['UTF8ToString'] = UTF8ToString;
    function callMain() {
      var entryFunction = _main;
      var argc = 0;
      var argv = 0;
      try {
        var ret = entryFunction(argc, argv);
        exitJS(ret, true);
        return ret;
      } catch (e) {
        return handleException(e);
      }
    }
    function run() {
      if (runDependencies > 0) {
        dependenciesFulfilled = run;
        return;
      }
      preRun();
      if (runDependencies > 0) {
        dependenciesFulfilled = run;
        return;
      }
      function doRun() {
        Module['calledRun'] = true;
        if (ABORT) return;
        initRuntime();
        preMain();
        readyPromiseResolve(Module);
        var noInitialRun;
        if (!noInitialRun) callMain();
        postRun();
      }
      {
        doRun();
      }
    }
    run();
    moduleRtn = readyPromise;
    return moduleRtn;
  };
})();
function registerWorkletProcessor(Module, audioNodeKey) {
  class WasmProcessor extends AudioWorkletProcessor {
    constructor(options) {
      super(options);
      this.wasmReady = false;
      this.wasmModule = null;
      this.channels = 0;
      this.buffersIn = [];
      this.buffersOut = [];
      this.audioBuffers = []; // list of (multi-channel) audio buffers
      this.audioBuffersStart = 0; // time-stamp for the first audio buffer
      this.audioBuffersEnd = 0; // just to be helpful

      this.timeIntervalSamples = sampleRate * 0.1;
      this.timeIntervalCounter = 0;
      this.timeMap = [{
        active: false,
        input: 0,
        output: 0,
        rate: 1,
        semitones: 0,
        loopStart: 0,
        loopEnd: 0
      }];
      let remoteMethods = {
        configure: config => {
          let blockChanged = config.blockMs != this.config.blockMs || config.intervalMs != this.config.intervalMs;
          Object.assign(this.config, config);
          if (config.blockMs && blockChanged) this.configure();
        },
        setUpdateInterval: seconds => {
          this.timeIntervalSamples = sampleRate * seconds;
        },
        stop: when => {
          if (typeof when !== 'number') when = currentTime;
          return remoteMethods.schedule({
            active: false,
            output: when
          });
        },
        start: (when, offset, duration, rate, semitones) => {
          if (typeof when === 'object') {
            if (!('active' in when)) when.active = true;
            return remoteMethods.schedule(when);
          }
          let obj = {
            active: true,
            input: 0,
            output: currentTime + this.outputLatencySeconds
          };
          if (typeof when === 'number') obj.output = when;
          if (typeof offset === 'number') obj.input = offset;
          if (typeof rate === 'number') obj.rate = rate;
          if (typeof semitones === 'number') obj.semitones = semitones;
          let result = remoteMethods.schedule(obj);
          if (typeof duration === 'number') {
            remoteMethods.stop(obj.output + duration);
            obj.output += duration;
            obj.active = false;
            remoteMethods.schedule(obj);
          }
          return result;
        },
        schedule: (objIn, adjustPrevious) => {
          let outputTime = 'output' in objIn ? objIn.output : currentTime;
          let latestSegment = this.timeMap[this.timeMap.length - 1];
          while (this.timeMap.length && this.timeMap[this.timeMap.length - 1].output >= outputTime) {
            latestSegment = this.timeMap.pop();
          }
          let obj = {
            active: latestSegment.active,
            input: null,
            rate: latestSegment.rate,
            semitones: latestSegment.semitones,
            loopStart: latestSegment.loopStart,
            loopEnd: latestSegment.loopEnd
          };
          Object.assign(obj, objIn);
          obj.output = outputTime;
          if (obj.input === null) {
            let rate = latestSegment.active ? latestSegment.rate : 0;
            obj.input = latestSegment.input + (obj.output - latestSegment.output) * rate;
          }
          this.timeMap.push(obj);
          if (adjustPrevious && this.timeMap.length > 1) {
            let previous = this.timeMap[this.timeMap.length - 2];
            if (previous.output < currentTime) {
              let rate = previous.active ? previous.rate : 0;
              previous.input += (currentTime - previous.output) * rate;
              previous.output = currentTime;
            }
            previous.rate = (obj.input - previous.input) / (obj.output - previous.output);
          }
          let currentMapSegment = this.timeMap[0];
          while (this.timeMap.length > 1 && this.timeMap[1].output <= outputTime) {
            this.timeMap.shift();
            currentMapSegment = this.timeMap[0];
          }
          let rate = currentMapSegment.active ? currentMapSegment.rate : 0;
          let inputTime = currentMapSegment.input + (outputTime - currentMapSegment.output) * rate;
          this.timeIntervalCounter = this.timeIntervalSamples;
          this.port.postMessage(['time', inputTime]);
          return obj;
        },
        dropBuffers: toSeconds => {
          if (typeof toSeconds !== 'number') {
            let buffers = this.audioBuffers.flat(1).map(b => b.buffer);
            this.audioBuffers = [];
            this.audioBuffersStart = this.audioBuffersEnd = 0;
            return {
              value: {
                start: 0,
                end: 0
              },
              transfer: buffers
            };
          }
          let transfer = [];
          while (this.audioBuffers.length) {
            let first = this.audioBuffers[0];
            let length = first[0].length;
            let endSamples = this.audioBuffersStart + length;
            let endSeconds = endSamples / sampleRate;
            if (endSeconds > toSeconds) break;
            this.audioBuffers.shift().forEach(b => transfer.push(b.buffer));
            this.audioBuffersStart += length;
          }
          return {
            value: {
              start: this.audioBuffersStart / sampleRate,
              end: this.audioBuffersEnd / sampleRate
            },
            transfer: transfer
          };
        },
        addBuffers: sampleBuffers => {
          sampleBuffers = [].concat(sampleBuffers);
          this.audioBuffers.push(sampleBuffers);
          let length = sampleBuffers[0].length;
          this.audioBuffersEnd += length;
          return this.audioBuffersEnd / sampleRate;
        }
      };
      let pendingMessages = [];
      this.port.onmessage = event => pendingMessages.push(event);
      Module().then(wasmModule => {
        this.wasmModule = wasmModule;
        this.wasmReady = true;
        wasmModule._main();
        this.channels = options.numberOfOutputs ? options.outputChannelCount[0] : 2; // stereo by default
        this.configure();
        this.port.onmessage = event => {
          let data = event.data;
          let messageId = data.shift();
          let method = data.shift();
          let result = remoteMethods[method](...data);
          if (result?.transfer) {
            this.port.postMessage([messageId, result.value], result.transfer);
          } else {
            this.port.postMessage([messageId, result]);
          }
        };
        let methodArgCounts = {};
        for (let key in remoteMethods) {
          methodArgCounts[key] = remoteMethods[key].length;
        }
        this.port.postMessage(['ready', methodArgCounts]);
        pendingMessages.forEach(this.port.onmessage);
        pendingMessages = null;
      });
    }
    config = {
      tonalityHz: 8000
    };
    configure() {
      if (this.config.blockMs) {
        let blockSamples = Math.round(this.config.blockMs / 1000 * sampleRate);
        let intervalSamples = Math.round((this.config.intervalMs || this.config.blockMs * 0.25) / 1000 * sampleRate);
        this.wasmModule._configure(this.channels, blockSamples, intervalSamples);
        this.wasmModule._reset();
      } else {
        this.wasmModule._presetDefault(this.channels, sampleRate);
      }
      this.updateBuffers();
      this.inputLatencySeconds = this.wasmModule._inputLatency() / sampleRate;
      this.outputLatencySeconds = this.wasmModule._outputLatency() / sampleRate;
    }
    updateBuffers() {
      let wasmModule = this.wasmModule;
      // longer than one STFT block, so we can seek smoothly
      this.bufferLength = wasmModule._inputLatency() + wasmModule._outputLatency();
      let lengthBytes = this.bufferLength * 4;
      let bufferPointer = wasmModule._setBuffers(this.channels, this.bufferLength);
      this.buffersIn = [];
      this.buffersOut = [];
      for (let c = 0; c < this.channels; ++c) {
        this.buffersIn.push(bufferPointer + lengthBytes * c);
        this.buffersOut.push(bufferPointer + lengthBytes * (c + this.channels));
      }
    }
    process(inputList, outputList, parameters) {
      if (!this.wasmReady) {
        outputList.forEach(output => {
          output.forEach(channel => {
            channel.fill(0);
          });
        });
        return true;
      }
      if (!outputList[0]?.length) return false;
      let outputTime = currentTime + this.outputLatencySeconds;
      while (this.timeMap.length > 1 && this.timeMap[1].output <= outputTime) {
        this.timeMap.shift();
      }
      let currentMapSegment = this.timeMap[0];
      let wasmModule = this.wasmModule;
      wasmModule._setTransposeSemitones(currentMapSegment.semitones, this.config.tonalityHz / sampleRate);

      // Check the input/output channel counts
      if (outputList[0].length != this.channels) {
        this.channels = outputList[0]?.length || 0;
        configure();
      }
      let outputBlockSize = outputList[0][0].length;
      let memory = wasmModule.exports ? wasmModule.exports.memory.buffer : wasmModule.HEAP8.buffer;
      // Buffer list (one per channel)
      let inputs = inputList[0];
      if (!currentMapSegment.active) {
        outputList[0].forEach((_, c) => {
          let channelBuffer = inputs[c % inputs.length];
          let buffer = new Float32Array(memory, this.buffersIn[c], outputBlockSize);
          buffer.fill(0);
        });
        // Should detect silent input and skip processing
        wasmModule._process(outputBlockSize, outputBlockSize);
      } else if (inputs?.length) {
        // Live input
        outputList[0].forEach((_, c) => {
          let channelBuffer = inputs[c % inputs.length];
          let buffer = new Float32Array(memory, this.buffersIn[c], outputBlockSize);
          if (channelBuffer) {
            buffer.set(channelBuffer);
          } else {
            buffer.fill(0);
          }
        });
        wasmModule._process(outputBlockSize, outputBlockSize);
      } else {
        let inputTime = currentMapSegment.input + (outputTime - currentMapSegment.output) * currentMapSegment.rate;
        let loopLength = currentMapSegment.loopEnd - currentMapSegment.loopStart;
        if (loopLength > 0 && inputTime >= currentMapSegment.loopEnd) {
          currentMapSegment.input -= loopLength;
          inputTime -= loopLength;
        }
        inputTime += this.inputLatencySeconds;
        let inputSamplesEnd = Math.round(inputTime * sampleRate);

        // Fill the buffer with previous input
        let buffers = outputList[0].map((_, c) => new Float32Array(memory, this.buffersIn[c], this.bufferLength));
        let blockSamples = 0; // current write position in the temporary input buffer
        let audioBufferIndex = 0;
        let audioSamples = this.audioBuffersStart; // start of current audio buffer
        // zero-pad until the start of the audio data
        let inputSamples = inputSamplesEnd - this.bufferLength;
        if (inputSamples < audioSamples) {
          blockSamples = audioSamples - inputSamples;
          buffers.forEach(b => b.fill(0, 0, blockSamples));
          inputSamples = audioSamples;
        }
        while (audioBufferIndex < this.audioBuffers.length && audioSamples < inputSamplesEnd) {
          let audioBuffer = this.audioBuffers[audioBufferIndex];
          let startIndex = inputSamples - audioSamples; // start index within the audio buffer
          let bufferEnd = audioSamples + audioBuffer[0].length;
          // how many samples to copy: min(how many left in the buffer, how many more we need)
          let count = Math.min(audioBuffer[0].length - startIndex, inputSamplesEnd - inputSamples);
          if (count > 0) {
            buffers.forEach((buffer, c) => {
              let channelBuffer = audioBuffer[c % audioBuffer.length];
              buffer.subarray(blockSamples).set(channelBuffer.subarray(startIndex, startIndex + count));
            });
            audioSamples += count;
            blockSamples += count;
          } else {
            // we're already past this buffer - skip it
            audioSamples += audioBuffer[0].length;
          }
          ++audioBufferIndex;
        }
        if (blockSamples < this.bufferLength) {
          buffers.forEach(buffer => buffer.subarray(blockSamples).fill(0));
        }

        // constantly seeking, so we don't have to worry about the input buffers needing to be a rate-dependent size
        wasmModule._seek(this.bufferLength, currentMapSegment.rate);
        wasmModule._process(0, outputBlockSize);
        this.timeIntervalCounter -= outputBlockSize;
        if (this.timeIntervalCounter <= 0) {
          this.timeIntervalCounter = this.timeIntervalSamples;
          this.port.postMessage(['time', inputTime]);
        }
      }

      // Re-fetch in case the memory changed (even though there *shouldn't* be any allocations)
      memory = wasmModule.exports ? wasmModule.exports.memory.buffer : wasmModule.HEAP8.buffer;
      outputList[0].forEach((channelBuffer, c) => {
        let buffer = new Float32Array(memory, this.buffersOut[c], outputBlockSize);
        channelBuffer.set(buffer);
      });
      return true;
    }
  }
  registerProcessor(audioNodeKey, WasmProcessor);
}

/**
	Creates a Stretch node
	@async
	@function SignalsmithStretch
	@param {AudioContext} audioContext
	@param {Object} options - channel configuration (as per [options]{@link https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/AudioWorkletNode#options})
	@returns {Promise<StretchNode>}
*/
SignalsmithStretch = ((Module, audioNodeKey) => {
  if (typeof AudioWorkletProcessor === 'function' && typeof registerProcessor === 'function') {
    // AudioWorklet side
    registerWorkletProcessor(Module, audioNodeKey);
    return {};
  }
  let promiseKey = Symbol();
  let createNode = async function (audioContext, options) {
    /**
    @classdesc An `AudioWorkletNode` with Signalsmith Stretch extensions
    @name StretchNode
    @augments AudioWorkletNode
    @property {number} inputTime - the current playback (in seconds) within the input audio stored by the node
    */
    let audioNode;
    options = options || {
      numberOfInputs: 1,
      numberOfOutputs: 1,
      outputChannelCount: [2]
    };
    try {
      audioNode = new AudioWorkletNode(audioContext, audioNodeKey, options);
    } catch (e) {
      if (!audioContext[promiseKey]) {
        let moduleUrl = createNode.moduleUrl;
        if (!moduleUrl) {
          let moduleCode = `(${registerWorkletProcessor})((_scriptName=>${Module})(),${JSON.stringify(audioNodeKey)})`;
          moduleUrl = URL.createObjectURL(new Blob([moduleCode], {
            type: 'text/javascript'
          }));
        }
        audioContext[promiseKey] = audioContext.audioWorklet.addModule(moduleUrl);
      }
      await audioContext[promiseKey];
      audioNode = new AudioWorkletNode(audioContext, audioNodeKey, options);
    }

    // messages with Promise responses
    let requestMap = {};
    let idCounter = 0;
    let timeUpdateCallback = null;
    let post = (transfer, ...data) => {
      let id = idCounter++;
      return new Promise(resolve => {
        requestMap[id] = resolve;
        audioNode.port.postMessage([id].concat(data), transfer);
      });
    };
    audioNode.inputTime = 0;
    audioNode.port.onmessage = event => {
      let data = event.data;
      let id = data[0],
        value = data[1];
      if (id == 'time') {
        audioNode.inputTime = value;
        if (timeUpdateCallback) timeUpdateCallback(value);
      }
      if (id in requestMap) {
        requestMap[id](value);
        delete requestMap[id];
      }
    };
    return new Promise(resolve => {
      requestMap['ready'] = remoteMethodKeys => {
        Object.keys(remoteMethodKeys).forEach(key => {
          let argCount = remoteMethodKeys[key];
          audioNode[key] = (...args) => {
            let transfer = null;
            if (args.length > argCount) {
              transfer = args.pop();
            }
            return post(transfer, key, ...args);
          };
        });
        /** @lends StretchNode.prototype
        @method setUpdateInterval
        */
        audioNode.setUpdateInterval = (seconds, callback) => {
          timeUpdateCallback = callback;
          return post(null, 'setUpdateInterval', seconds);
        };
        resolve(audioNode);
      };
    });
  };
  return createNode;
})(SignalsmithStretch, 'signalsmith-stretch');
// register as a CommonJS/AMD module
if (typeof exports === 'object' && typeof module === 'object') {
  module.exports = SignalsmithStretch;
} else if (typeof define === 'function' && define['amd']) {
  define([], () => SignalsmithStretch);
}
let _export = SignalsmithStretch;
export default _export;
//# sourceMappingURL=SignalsmithStretch.mjs.map